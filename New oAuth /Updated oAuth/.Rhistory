post_top_20_degree_subgraph <- induced_subgraph(post_twomode_subgraph, vids = post_top_20_degree_vertex_ids)
# Create a data frame with node names and degree values
post_degree_df <- data.frame(name = names(post_degree_values), degree = post_degree_values)
# Filter the data frame to keep only the top 20 nodes
post_top_20_degree_df <- post_degree_df[post_top_20_degree_vertex_ids, ]
# Create vertex labels by combining node names and their degree values
post_vertex_labels <- paste(post_top_20_degree_df$name, "\n", sprintf("%d", post_top_20_degree_df$degree), sep = "")
# Calculate the layout for the graph
post_layout <- layout_nicely(post_top_20_degree_subgraph)
# Plot the graph with combined node labels and degree centrality
plot(post_top_20_degree_subgraph, post_layout = post_layout,
vertex.label = post_vertex_labels,
vertex.size = 6, edge.arrow.size =0.2,
vertex.label.dist =1, vertex.label.cex=0.5 )
# Calculate the degree centrality for post
post_degree_values <- degree(post_twomode_subgraph, mode = "total")
# Sort the degree centrality values and extract the top 20 nodes
post_top_20_degree <- sort(post_degree_values, decreasing = TRUE)[1:20]
# Get the node names of the top 20 nodes
post_top_20_degree_node_names <- names(post_top_20_degree)
# Find the corresponding vertex ids in the graph
post_top_20_degree_vertex_ids <- match(post_top_20_degree_node_names, V(post_twomode_subgraph)$name)
# Create the subgraph containing the top 20 nodes
post_top_20_degree_subgraph <- induced_subgraph(post_twomode_subgraph, vids = post_top_20_degree_vertex_ids)
# Create a data frame with node names and degree values
post_degree_df <- data.frame(name = names(post_degree_values), degree = post_degree_values)
# Filter the data frame to keep only the top 20 nodes
post_top_20_degree_df <- post_degree_df[post_top_20_degree_vertex_ids, ]
# Create vertex labels by combining node names and their degree values
post_vertex_labels <- paste(post_top_20_degree_df$name, "\n", sprintf("%d", post_top_20_degree_df$degree), sep = "")
# Calculate the layout for the graph
post_layout <- layout_nicely(post_top_20_degree_subgraph)
# Plot the graph with combined node labels and degree centrality
plot(post_top_20_degree_subgraph, post_layout = post_layout,
vertex.label = post_vertex_labels,
vertex.size = 2, edge.arrow.size =0.2,
vertex.label.dist =1, vertex.label.cex=0.8 )
# Calculate the degree centrality for post
post_degree_values <- degree(post_twomode_subgraph, mode = "total")
# Sort the degree centrality values and extract the top 20 nodes
post_top_20_degree <- sort(post_degree_values, decreasing = TRUE)[1:20]
# Get the node names of the top 20 nodes
post_top_20_degree_node_names <- names(post_top_20_degree)
# Find the corresponding vertex ids in the graph
post_top_20_degree_vertex_ids <- match(post_top_20_degree_node_names, V(post_twomode_subgraph)$name)
# Create the subgraph containing the top 20 nodes
post_top_20_degree_subgraph <- induced_subgraph(post_twomode_subgraph, vids = post_top_20_degree_vertex_ids)
# Create a data frame with node names and degree values
post_degree_df <- data.frame(name = names(post_degree_values), degree = post_degree_values)
# Filter the data frame to keep only the top 20 nodes
post_top_20_degree_df <- post_degree_df[post_top_20_degree_vertex_ids, ]
# Create vertex labels by combining node names and their degree values
post_vertex_labels <- paste(post_top_20_degree_df$name, "\n", sprintf("%d", post_top_20_degree_df$degree), sep = "")
# Calculate the layout for the graph
post_layout <- layout_nicely(post_top_20_degree_subgraph)
# Plot the graph with combined node labels and degree centrality
plot(post_top_20_degree_subgraph, post_layout = post_layout,
vertex.label = post_vertex_labels,
vertex.size = 2, edge.arrow.size =0.2,
vertex.label.dist =1, vertex.label.cex=2)
# Calculate the degree centrality for post
post_degree_values <- degree(post_twomode_subgraph, mode = "total")
# Sort the degree centrality values and extract the top 20 nodes
post_top_20_degree <- sort(post_degree_values, decreasing = TRUE)[1:20]
# Get the node names of the top 20 nodes
post_top_20_degree_node_names <- names(post_top_20_degree)
# Find the corresponding vertex ids in the graph
post_top_20_degree_vertex_ids <- match(post_top_20_degree_node_names, V(post_twomode_subgraph)$name)
# Create the subgraph containing the top 20 nodes
post_top_20_degree_subgraph <- induced_subgraph(post_twomode_subgraph, vids = post_top_20_degree_vertex_ids)
# Create a data frame with node names and degree values
post_degree_df <- data.frame(name = names(post_degree_values), degree = post_degree_values)
# Filter the data frame to keep only the top 20 nodes
post_top_20_degree_df <- post_degree_df[post_top_20_degree_vertex_ids, ]
# Create vertex labels by combining node names and their degree values
post_vertex_labels <- paste(post_top_20_degree_df$name, "\n", sprintf("%d", post_top_20_degree_df$degree), sep = "")
# Calculate the layout for the graph
post_layout <- layout_nicely(post_top_20_degree_subgraph)
# Plot the graph with combined node labels and degree centrality
plot(post_top_20_degree_subgraph, post_layout = post_layout,
vertex.label = post_vertex_labels,
vertex.size = 2, edge.arrow.size =0.2,
vertex.label.dist =1, vertex.label.cex=0.9)
post_betweenness_values
# Extract the betweenness score for "@postmalone"
post_malone_betweenness <- post_betweenness_values["@postmalone"]
# Create a data frame with the node name and its betweenness score
post_malone_df <- data.frame(Node = "@postmalone", Betweenness = post_malone_betweenness)
# Print the data frame
print(post_malone_df)
postmalone_centrality_df <- data.frame(
Node = "@postmalone",
Degree = postmalone_degree,
Betweenness = postmalone_betweenness,
Closeness = postmalone_closeness
)
degree_values <- degree(post_twomode_subgraph, mode = "total")
betweenness_values <- betweenness(post_twomode_subgraph, directed = FALSE)
closeness_values <- closeness(post_twomode_subgraph, mode = "total")
# Find the index of "@postmalone" in the graph
postmalone_index <- which(V(twomode_graph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- degree_values[postmalone_index]
postmalone_betweenness <- betweenness_values[postmalone_index]
postmalone_closeness <- closeness_values[postmalone_index]
# Create a data frame with the centrality measures for "@postmalone"
postmalone_centrality_df <- data.frame(
Node = "@postmalone",
Degree = postmalone_degree,
Betweenness = postmalone_betweenness,
Closeness = postmalone_closeness
)
closeness_values
betweenness_values
degree_values
postmalone_index <- which(V(twomode_graph)$name == "@postmalone")
postmalone_index
postmalone_degree <- degree_values[postmalone_index]
postmalone_betweenness <- betweenness_values[postmalone_index]
postmalone_closeness <- closeness_values[postmalone_index]
postmalone_degree
postmalone_betweenness
postmalone_closeness
degree_values <- degree(post_twomode_subgraph)
betweenness_values <- betweenness(post_twomode_subgraph, directed = FALSE)
closeness_values <- closeness(post_twomode_subgraph)
# Find the index of "@postmalone" in the subgraph
postmalone_index <- which(V(post_twomode_subgraph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- degree_values[postmalone_index]
postmalone_betweenness <- betweenness_values[postmalone_index]
postmalone_closeness <- closeness_values[postmalone_index]
# Create a data frame with the centrality measures for "@postmalone"
postmalone_centrality_df <- data.frame(
Node = "@postmalone",
Degree = postmalone_degree,
Betweenness = postmalone_betweenness,
Closeness = postmalone_closeness
)
# Print the data frame
print(postmalone_centrality_df)
# Calculate the degree, betweenness, and closeness centrality for the original twomode_graph
degree_values <- degree(twomode_graph)
betweenness_values <- betweenness(twomode_graph, directed = FALSE)
closeness_values <- closeness(twomode_graph)
# Find the index of "@postmalone" in the original twomode_graph
postmalone_index <- which(V(twomode_graph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- degree_values[postmalone_index]
postmalone_betweenness <- betweenness_values[postmalone_index]
postmalone_closeness <- closeness_values[postmalone_index]
# Create a data frame with the centrality measures for "@postmalone"
postmalone_centrality_df <- data.frame(
Node = "@postmalone",
Degree = postmalone_degree,
Betweenness = postmalone_betweenness,
Closeness = postmalone_closeness
)
# Print the data frame
print(postmalone_centrality_df)
# Find the index of "@postmalone" in the original twomode_graph
postmalone_index <- which(V(twomode_graph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- post_degree_values[postmalone_index]
postmalone_betweenness <- post_betweenness_values[postmalone_index]
postmalone_closeness <- post_closeness_df[postmalone_index]
# Find the index of "@postmalone" in the original twomode_graph
postmalone_index <- which(V(twomode_graph)$name == "@postmalone")
postmalone_index
postmalone_index <- which(V(post_twomode_subgraph)$name == "@postmalone")
postmalone_index
postmalone_index <- which(V(post_twomode_subgraph)$name == "@postmalone")
postmalone_index
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- post_degree_values[postmalone_index]
postmalone_betweenness <- post_betweenness_values[postmalone_index]
postmalone_closeness <- post_closeness_df[postmalone_index]
post_degree_values
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- post_top_20_degree_subgraph[postmalone_index]
# Find the index of "@postmalone" in the original twomode_graph
postmalone_index <- which(V(post_top_20_degree_subgraph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- post_top_20_degree_subgraph[postmalone_index]
# Find the index of "@postmalone" in the original twomode_graph
postmalone_index <- which(V(post_top_20_degree_subgraph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- post_top_20_degree_subgraph[postmalone_index]
postmalone_betweenness <- post_top_20_degree_subgraph[postmalone_index]
postmalone_closeness <- post_top_20_degree_subgraph[postmalone_index]
# Create a data frame with the centrality measures for "@postmalone"
postmalone_centrality_df <- data.frame(
Node = "@postmalone",
Degree = postmalone_degree,
Betweenness = postmalone_betweenness,
Closeness = postmalone_closeness
)
# Print the data frame
print(postmalone_centrality_df)
# Find the index of "@postmalone" in the original twomode_graph
postmalone_index <- which(V(post_top_20_degree_subgraph)$name == "@postmalone")
postmalone_index
# Find the index of "@postmalone" in the original post_top_20_degree_subgraph
postmalone_index <- which(V(post_top_20_degree_subgraph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- degree(post_top_20_degree_subgraph)[postmalone_index]
postmalone_betweenness <- betweenness(post_top_20_degree_subgraph, directed = FALSE)[postmalone_index]
postmalone_closeness <- closeness(post_top_20_degree_subgraph, mode = "total")[postmalone_index]
# Create a data frame with the centrality measures for "@postmalone"
postmalone_centrality_df <- data.frame(
Node = "@postmalone",
Degree = postmalone_degree,
Betweenness = postmalone_betweenness,
Closeness = postmalone_closeness
)
# Print the data frame
print(postmalone_centrality_df)
# Find the index of "@postmalone" in the original post_top_20_degree_subgraph
postmalone_index <- which(V(post_top_20_degree_subgraph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- degree(post_top_20_degree_subgraph, mode = "total")[postmalone_index]
postmalone_betweenness <- betweenness(post_top_20_degree_subgraph, directed = FALSE)[postmalone_index]
postmalone_closeness <- closeness(post_top_20_degree_subgraph, mode = "total")[postmalone_index]
# Create a data frame with the centrality measures for "@postmalone"
postmalone_centrality_df <- data.frame(
Node = "@postmalone",
Degree = postmalone_degree,
Betweenness = postmalone_betweenness,
Closeness = postmalone_closeness
)
# Print the data frame
print(postmalone_centrality_df)
postmalone_degree <- degree(post_top_20_degree_subgraph, mode = "total")[postmalone_index]
postmalone_degree
postmalone_betweenness <- betweenness(post_top_20_degree_subgraph, directed = FALSE)[postmalone_index]
postmalone_betweenness
postmalone_closeness <- closeness(post_top_20_degree_subgraph, mode = "total")[postmalone_index]
postmalone_closeness
# Find the index of "@postmalone" in the original post_top_20_degree_subgraph
postmalone_index <-(V(post_top_20_degree_subgraph)$name == "@postmalone")
x
postmalone_index
postmalone_index <-which(V(post_top_20_degree_subgraph)$name == "@postmalone")
postmalone_index
# Find the index of "@postmalone" in the original post_top_20_degree_subgraph
postmalone_index <-which(V(post_twomode_subgraph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- degree(post_twomode_subgraph, mode = "total")[postmalone_index]
postmalone_degree
postmalone_betweenness <- betweenness(post_twomode_subgraph, directed = FALSE)[postmalone_index]
postmalone_betweenness
postmalone_closeness <- closeness(post_twomode_subgraph, mode = "total")[postmalone_index]
postmalone_closeness
# Create a data frame with the centrality measures for "@postmalone"
postmalone_centrality_df <- data.frame(
Node = "@postmalone",
Degree = postmalone_degree,
Betweenness = postmalone_betweenness,
Closeness = postmalone_closeness
)
# Print the data frame
print(postmalone_centrality_df)
# Find the index of "@brunomars" in the original Post
brunomars_index <-which(V(bruno_twomode_subgraph)$name == "@brunomars")
# Get the degree, betweenness, and closeness
brunomars_degree <- degree(bruno_twomode_subgraph, mode = "total")[brunomars_index]
brunomars_betweenness <- betweenness(bruno_twomode_subgraph, directed = FALSE)[brunomars_index]
brunomars_closeness <- closeness(bruno_twomode_subgraph, mode = "total")[brunomars_index]
# Create a data frame with the centrality measures for "bruno Mars
brunomars_centrality_df <- data.frame(
Node = "@brunomars",
Degree = brunomars_degree,
Betweenness = brunomars_betweenness,
Closeness = brunomars_closeness
)
# Print the data frame
print(brunomars_centrality_df)
combined_centrality_df <- rbind(brunomars_centrality_df, postmalone_centrality_df)
View(combined_centrality_df)
# Load ggplot2 if you haven't already
library(ggplot2)
# Create a bar plot
ggplot(combined_centrality_df, aes(x = Node, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Centrality Measures Comparison",
x = "Node",
y = "Value",
fill = "Centrality Measure"
) +
theme_minimal()
ggplot(combined_centrality_df, aes(x = Node, y = Degree, fill = Node)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Degree Centrality Comparison",
x = "",
y = "Degree") +
theme(legend.position = "none")
combined_centrality_df <- rbind(brunomars_centrality_df, postmalone_centrality_df)
View(combined_centrality_df)
ggplot(combined_centrality_df, aes(x = Node, y = Degree, fill = Node)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Degree Centrality Comparison",
x = "",
y = "Degree") +
theme(legend.position = "none")
combined_centrality_df <- rbind(brunomars_centrality_df, postmalone_centrality_df)
ggplot(combined_centrality_df, aes(x = Node, y = Degree, fill = Node)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Degree Centrality Comparison",
x = "",
y = "Degree") +
theme(legend.position = "none")
ggplot(combined_centrality_df, aes(x = Node, y = Betweenness, fill = Node)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Betweenness Centrality Comparison",
x = "",
y = "Betweenness") +
theme(legend.position = "none")
ggplot(combined_centrality_df, aes(x = Node, y = Closeness, fill = Node)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
labs(title = "Closeness Centrality Comparison",
x = "",
y = "Closeness") +
theme(legend.position = "none")
# Find the index of "@brunomars" in the original Post
brunomars_index <-which(V(bruno_twomode_subgraph)$name == "@brunomars")
# Get the degree, betweenness, and closeness
brunomars_degree <- degree(bruno_twomode_subgraph, mode = "total")[brunomars_index]
brunomars_betweenness <- betweenness(bruno_twomode_subgraph, directed = FALSE)[brunomars_index]
brunomars_closeness <- closeness(bruno_twomode_subgraph, mode = "total")[brunomars_index]
# Create a data frame with the centrality measures for "bruno Mars
brunomars_centrality_df <- data.frame(
Node = "@brunomars",
Degree = brunomars_degree,
Betweenness = brunomars_betweenness,
Closeness = brunomars_closeness
)
# Print the data frame
print(brunomars_centrality_df)
# Find the index of "@brunomars" in the original Post
brunomars_index <-which(V(bruno_twomode_subgraph)$name == "@brunomars")
# Get the degree, betweenness, and closeness
brunomars_degree <- degree(bruno_twomode_subgraph, mode = "total")[brunomars_index]
brunomars_betweenness <- betweenness(bruno_twomode_subgraph, directed = FALSE)[brunomars_index]
brunomars_closeness <- closeness(bruno_twomode_subgraph, mode = "total")[brunomars_index]
# Create a data frame with the centrality measures for "bruno Mars
brunomars_centrality_df <- data.frame(
Node = "@brunomars",
Degree = brunomars_degree,
Betweenness = brunomars_betweenness,
Closeness = brunomars_closeness
)
# Print the data frame
print(brunomars_centrality_df)
# Find the index of "@postmalone" in the original Post
postmalone_index <-which(V(post_twomode_subgraph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- degree(post_twomode_subgraph, mode = "total")[postmalone_index]
postmalone_degree
postmalone_betweenness <- betweenness(post_twomode_subgraph, directed = FALSE)[postmalone_index]
postmalone_betweenness
postmalone_closeness <- closeness(post_twomode_subgraph, mode = "total")[postmalone_index]
postmalone_closeness
# Create a data frame with the centrality measures for "@postmalone"
postmalone_centrality_df <- data.frame(
Node = "@postmalone",
Degree = postmalone_degree,
Betweenness = postmalone_betweenness,
Closeness = postmalone_closeness
)
# Print the data frame
print(postmalone_centrality_df)
# Find the index of "@postmalone" in the original Post
postmalone_index <-which(V(post_twomode_subgraph)$name == "@postmalone")
# Get the degree, betweenness, and closeness for "@postmalone"
postmalone_degree <- degree(post_twomode_subgraph, mode = "total")[postmalone_index]
postmalone_betweenness <- betweenness(post_twomode_subgraph, directed = FALSE)[postmalone_index]
postmalone_closeness <- closeness(post_twomode_subgraph, mode = "total")[postmalone_index]
# Create a data frame with the centrality measures for "@postmalone"
postmalone_centrality_df <- data.frame(
Node = "@postmalone",
Degree = postmalone_degree,
Betweenness = postmalone_betweenness,
Closeness = postmalone_closeness
)
# Print the data frame
print(postmalone_centrality_df)
combined_centrality_df <- rbind(brunomars_centrality_df, postmalone_centrality_df)
View(combined_centrality_df)
save.image("~/Desktop/Social Media Milestone 2/New oAuth /UpdatedMilestone2.2.RData")
# Get the top 10 words with the highest frequency
top_10_words <- subset(word_frequ_df, freq > 67) %>%
dplyr::arrange(-freq) %>%
head(10)
# Plot the top 10 words
ggplot(top_10_words, aes(x = reorder(word, -freq), y = freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Top 10 Word Frequency") +
xlab("Words") +
ylab("Frequency")
setwd("/Users/frazerlinscott/Desktop/Social Media Milestone 2/New oAuth /Updated oAuth")
library(tuber)
library(vosonSML)
library(magrittr)
library(igraph)
library(httpuv)
YTapi_key <- "AIzaSyATlclGOaBorzeCrKhO-NbuL7CYnafOULY"
YTclient_id <- "881581918236-p6lagdo0i8d655uso9k45sq31ke3g1tv.apps.googleusercontent.com"
YTclient_secret <- "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"
yt_oauth(app_id = YTclient_id, app_secret = YTclient_secret)
post_video_search <- yt_search("Post Malone")
View(post_video_search)
post_video_ids <- as.vector(post_video_search$video_id[1:3])
post_video_ids <- as.vector(post_video_search$video_id[1:3])
post_yt_data <- Authenticate("youtube", apiKey = api_key) %>%
Collect(videoIDs = post_video_ids,
writeToFile = TRUE,
maxComments = 500,
verbose = TRUE)
post_video_ids <- as.vector(post_video_search$video_id[1:3])
post_yt_data <- Authenticate("youtube", YTapiKey = YTapi_key) %>%
Collect(videoIDs = post_video_ids,
writeToFile = TRUE,
maxComments = 500,
verbose = TRUE)
post_video_ids <- as.vector(post_video_search$video_id[1:3])
post_yt_data <- Authenticate("youtube", apiKey = YTapi_key) %>%
Collect(videoIDs = post_video_ids,
writeToFile = TRUE,
maxComments = 500,
verbose = TRUE)
View(post_yt_data)
bruno_video_search <- yt_search("Bruno Mars")
View(bruno_video_search)
bruno_video_ids <- as.vector(bruno_video_search$video_id[1:3])
bruno_yt_data <- Authenticate("youtube", apiKey = YTapi_key) %>%
Collect(videoIDs = bruno_video_ids,
writeToFile = TRUE,
maxComments = 500,
verbose = TRUE)
View(bruno_yt_data)
View(post_yt_data)
bruno_yt_actor_network <- bruno_yt_data %>% Create("actor")
bruno_yt_actor_graph <- Graph(bruno_yt_actor_network)
post_yt_actor_network <- post_yt_data %>% Create("actor")
post_yt_actor_graph <- Graph(post_yt_actor_network)
bruno_undir_yt_actor_graph <- as.undirected(bruno_yt_actor_graph, mode = "collapse")
post_undir_yt_actor_graph <- as.undirected(post_yt_actor_graph, mode = "collapse")
save.image("~/Desktop/Social Media Milestone 2/New oAuth /Updated oAuth/NewMilestone.RData")
louvain_yt_actor <- cluster_louvain(bruno_undir_yt_actor_graph)
louvain_yt_actor <- cluster_louvain(bruno_undir_yt_actor_graph)
bruno_louvain_yt_actor <- cluster_louvain(bruno_undir_yt_actor_graph)
sizes(bruno_louvain_yt_actor)
plot(bruno_louvain_yt_actor,
bruno_undir_yt_actor_graph,
vertex.label = V(bruno_undir_yt_actor_graph)$screen_name,
vertex.size = 4,
vertex.label.cex = 0.7)
post_louvain_yt_actor <- cluster_louvain(post_undir_yt_actor_graph)
sizes(post_louvain_yt_actor)
write.graph(bruno_undir_yt_actor_graph, file = "bruno_undir_yt_actor_graph.graphml", format = "graphml")
write.graph(post_undir_yt_actor_graph, file = "post_undir_yt_actor_graph.graphml", format = "graphml")
bruno_eb_yt_actor <- cluster_edge_betweenness(bruno_undir_yt_actor_graph)
sizes(bruno_eb_yt_actor)
post_eb_yt_actor <- cluster_edge_betweenness(post_undir_yt_actor_graph)
sizes(post_eb_yt_actor)
plot(bruno_eb_yt_actor,
bruno_undir_yt_actor_graph,
vertex.label = V(bruno_undir_yt_actor_graph)$screen_name,
vertex.size = 4,
vertex.label.cex = 0.7)
plot(post_eb_yt_actor,
post_undir_yt_actor_graph,
vertex.label = V(post_undir_yt_actor_graph)$screen_name,
vertex.size = 4,
vertex.label.cex = 0.7)
plot(bruno_eb_yt_actor,
bruno_undir_yt_actor_graph,
vertex.label = V(bruno_undir_yt_actor_graph)$screen_name,
vertex.size = 4,
vertex.label.cex = 0.7)
plot(bruno_louvain_yt_actor,
bruno_undir_yt_actor_graph,
vertex.label = V(bruno_undir_yt_actor_graph)$screen_name,
vertex.size = 4,
vertex.label.cex = 0.7)
plot(post_louvain_yt_actor,
post_undir_yt_actor_graph,
vertex.label = V(post_undir_yt_actor_graph)$screen_name,
vertex.size = 4,
vertex.label.cex = 0.7)
bruno_yt_actor_network <- bruno_yt_data %>% Create("actor")
bruno_yt_actor_graph <- Graph(bruno_yt_actor_network)
bruno_undir_yt_actor_graph <- as.undirected(bruno_yt_actor_graph, mode = "collapse")
bruno_louvain_yt_actor <- cluster_louvain(bruno_undir_yt_actor_graph)
sizes(bruno_louvain_yt_actor)
post_yt_actor_network <- post_yt_data %>% Create("actor")
post_yt_actor_graph <- Graph(post_yt_actor_network)
post_undir_yt_actor_graph <- as.undirected(post_yt_actor_graph, mode = "collapse")
post_louvain_yt_actor <- cluster_louvain(post_undir_yt_actor_graph)
sizes(post_louvain_yt_actor)
bruno_eb_yt_actor <- cluster_edge_betweenness(bruno_undir_yt_actor_graph)
sizes(bruno_eb_yt_actor)
post_eb_yt_actor <- cluster_edge_betweenness(post_undir_yt_actor_graph)
sizes(post_eb_yt_actor)
save.image("~/Desktop/Social Media Milestone 2/New oAuth /Updated oAuth/NewMilestone1.2.RData")
