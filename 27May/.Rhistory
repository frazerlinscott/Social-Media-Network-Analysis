library(tidyverse)
library(modelr)
options (na.action = na.warn)
ggplot(sim1, aes(x,y)) + geom_point()
model1<- function(a, data){a[1]+data$x*a[2]}
model1(c(7,1.5),sim1)
View(model1)
model1(c(7,1.5, sim1))
measure_distance <- function(mod, data){
diff<-data$y-model1(mod,data)
sqrt(mean(diff^2))
}
measure_distance(c(7,1.5),sim1)
best<- optim(c(0,0), measure_distance, data =sim1)
best$par
measure_distance(best$par, sim1)
ggplot(sim1, aes(x, y)) +
geom_point(size = 2, colour = "grey30") + geom_abline(intercept = best$par[1], slope = best$par[2])
wd
getwd
mydata=read_csv("/Users/frazerlinscott/Downloads/LinearRegressionExample.csv")
install.packages("lme4", repos=c("http://lme4.r-forge.r-project.org/repos",
getOption("repos")[["CRAN"]]))
library(lme4)
View(mydata)
plot(mydata$Smoking, mydata$CHD, xlab='Average Cigarrettes per Adult per Day', ylab="Coronary Heart Disease Mortality")+
abline(lm(data=mydata, CHD ~ Smoking ), col="red")
fullmodel <- lm(data=mydata, CHD ~ Smoking+Fat+Exercise+Age)
print(fullmodel)
library(ISLR)
data(package="ISLR")
install.packages("ISLR")
install.package("tree")
install.packages("tree")
library(ISLR)
data(package_"ISLR")
data(package="ISLR")
carseats<Carseats
carseats<-Carseats
require(tree)
tree.carseats=tree(Urban~ComPrice_Income_Advertising+Population+Price+ShelveLoc+Age+Education+US, data=carseats)
tree.carseats=tree(Urban~ComPrice+Income+Advertising+Population+Price+ShelveLoc+Age+Education+US, data=carseats)
tree.carseats=tree(Urban~CompPrice+Income+Advertising+Population+Price+ShelveLoc+Age+Education+US, data=carseats)
plot(tree.carseats)
text(tree,carseats, pretty=0)
text(tree.carseats, pretty=0)
swirl()
load("~/Desktop/Social Media Milestone 2/27MayWD/Newest SNA.RData")
library(vosonSML)
library(magrittr)
library(igraph)
library(tidyr)
library(tidytext)
library(stopwords)
install.packages("remotes")
library(remotes)
# install GitHub version of vosonSML 0.32.10
install_github("vosonlab/vosonSML")
# install GitHub version of rtweet 1.1.0.9001
install_github("ropensci/rtweet")
# Load packages required for this session into library
library(vosonSML)
library(magrittr)
library(igraph)
library(tidyr)
library(tidytext)
library(stopwords)
View(Bruno_twitter_data)
bruno_twitter_actor_network <- Bruno_twitter_data %>% Create("actor")
bruno_twitter_actor_graph <- bruno_twitter_actor_network %>% Graph()
#write.graph(twomode_graph, file = "PostTwitterTwomode.graphml", format = "graphml")
V(bruno_twitter_actor_graph)$name <- V(bruno_twitter_actor_graph)$screen_name
V(bruno_twitter_actor_graph)$name
sort(degree(bruno_twitter_actor_graph, mode = "total"), decreasing = TRUE)[1:20]
sort(closeness(bruno_twitter_actor_graph, mode = "total"), decreasing = TRUE)[1:20]
sort(betweenness(bruno_twitter_actor_graph, directed = FALSE), decreasing = TRUE)[1:20]
# Calculate the degree centrality
Bruno_degree_values <- degree(bruno_twitter_actor_graph, mode = "total")
View(Bruno_degree_values)
# Sort the degree centrality values and extract the top 20 nodes
Bruno_top_20_degree <- sort(Bruno_degree_values, decreasing = TRUE)[1:20]
# Get the node names of the top 20 nodes
Bruno_top_20_degree_node_names <- names(Bruno_top_20_degree)
# Find the corresponding vertex ids in the graph
Bruno_top_20_degree_vertex_ids <- match(Bruno_top_20_degree_node_names, V(bruno_twitter_actor_graph)$name)
# Create the subgraph containing the top 20 nodes
Bruno_top_20_degree_subgraph <- induced_subgraph(bruno_twitter_actor_graph, vids = Bruno_top_20_degree_vertex_ids)
# Create a data frame with node names and degree values
Bruno_degree_df <- data.frame(name = names(Bruno_degree_values), degree = Bruno_degree_values)
Bruno_degree_df
# Filter the data frame to keep only the top 20 nodes
Bruno_top_20_degree_df <- Bruno_degree_df[Bruno_top_20_degree_vertex_ids, ]
Bruno_top_20_degree_df
# Create vertex labels by combining node names and their degree values
Bruno_vertex_labels <- paste(Bruno_top_20_degree_df$name, "\n", sprintf("%d", Bruno_top_20_degree_df$degree), sep = "")
Bruno_vertex_labels
# Calculate the layout for the graph
Bruno_layout_degree <- layout_with_kk(Bruno_top_20_degree_subgraph)
# Plot the graph with combined node labels and degree centrality
plot(Bruno_top_20_degree_subgraph, layout = Bruno_layout_degree,
vertex.label = Bruno_vertex_labels,
vertex.size = 6, edge.arrow.size = 0.1,
vertex.label.dist = 1.5)
Bruno_degree_values <- degree(bruno_twitter_actor_graph, mode = "total")
# Sort the degree centrality values and extract the top 20 nodes
Bruno_top_20_degree <- sort(Bruno_degree_values, decreasing = TRUE)[1:20]
# Get the node names of the top 20 nodes
Bruno_top_20_degree_node_names <- names(Bruno_top_20_degree)
# Find the corresponding vertex ids in the graph
Bruno_top_20_degree_vertex_ids <- match(Bruno_top_20_degree_node_names, V(bruno_twitter_actor_graph)$name)
# Create the subgraph containing the top 20 nodes
Bruno_top_20_degree_subgraph <- induced_subgraph(bruno_twitter_actor_graph, vids = Bruno_top_20_degree_vertex_ids)
# Create a data frame with node names and degree values
Bruno_degree_df <- data.frame(name = names(Bruno_degree_values), degree = Bruno_degree_values)
# Filter the data frame to keep only the top 20 nodes
Bruno_top_20_degree_df <- Bruno_degree_df[Bruno_top_20_degree_vertex_ids, ]
# Create vertex labels by combining node names and their degree values
Bruno_vertex_labels <- paste(Bruno_top_20_degree_df$name, "\n", sprintf("%d", Bruno_top_20_degree_df$degree), sep = "")
# Calculate the layout for the graph
Bruno_layout_degree <- layout_with_kk(Bruno_top_20_degree_subgraph)
# Plot the graph with combined node labels and degree centrality
plot(Bruno_top_20_degree_subgraph, layout = Bruno_layout_degree,
vertex.label = Bruno_vertex_labels,
vertex.size = 6, edge.arrow.size = 0.1,
vertex.label.dist = 1.5)
# Calculate the closeness centrality for Bruno
Bruno_closeness_values <- closeness(bruno_twitter_actor_graph)
# Sort the closeness centrality values and extract the top 20 nodes
Bruno_top_20_closeness <- sort(Bruno_closeness_values, decreasing = TRUE)[1:20]
# Get the node names of the top 20 nodes
Bruno_top_20_closeness_node_names <- names(Bruno_top_20_closeness)
# Find the corresponding vertex ids in the graph
Bruno_top_20_closeness_vertex_ids <- match(Bruno_top_20_closeness_node_names, V(bruno_twitter_actor_graph)$name)
# Create the subgraph containing the top 20 nodes
Bruno_top_20_closeness_subgraph <- induced_subgraph(bruno_twitter_actor_graph, vids = Bruno_top_20_closeness_vertex_ids)
# Create a data frame with node names and closeness values
Bruno_closeness_df <- data.frame(name = names(Bruno_closeness_values), closeness = Bruno_closeness_values)
# Filter the data frame to keep only the top 20 nodes
Bruno_top_20_closeness_df <- Bruno_closeness_df[Bruno_top_20_closeness_vertex_ids, ]
# Create vertex labels by combining node names and their closeness values
Bruno_vertex_labels_closeness <- paste(Bruno_top_20_closeness_df$name, "\n", sprintf("%.1f", Bruno_top_20_closeness_df$closeness), sep = "")
# Calculate the layout for the graph
Bruno_layout_closeness <- layout_nicely(Bruno_top_20_closeness_subgraph)
# Plot the graph with combined node labels and closeness centrality
plot(Bruno_top_20_closeness_subgraph, layout = Bruno_layout_closeness,
vertex.label = Bruno_vertex_labels_closeness,
vertex.size = 6, edge.arrow.size = 0.1,
vertex.label.dist = 1.5)
# Calculate the betweenness centrality for Bruno
Bruno_betweenness_values <- betweenness(bruno_twitter_actor_graph, directed = FALSE)
# Sort the betweenness centrality values and extract the top 20 nodes
Bruno_top_20_betweenness <- sort(Bruno_betweenness_values, decreasing = TRUE)[1:20]
# Get the node names of the top 20 nodes
Bruno_top_20_betweenness_node_names <- names(Bruno_top_20_betweenness)
# Find the corresponding vertex ids in the graph
Bruno_top_20_betweenness_vertex_ids <- match(Bruno_top_20_betweenness_node_names, V(bruno_twitter_actor_graph)$name)
# Create the subgraph containing the top 20 nodes
Bruno_top_20_betweenness_subgraph <- induced_subgraph(bruno_twitter_actor_graph, vids = Bruno_top_20_betweenness_vertex_ids)
# Create a data frame with node names and betweenness values
Bruno_betweenness_df <- data.frame(name = names(Bruno_betweenness_values), betweenness = Bruno_betweenness_values)
# Filter the data frame to keep only the top 20 nodes
Bruno_top_20_betweenness_df <- Bruno_betweenness_df[Bruno_top_20_betweenness_vertex_ids, ]
# Create vertex labels by combining node names and their betweenness values
Bruno_vertex_labels_betweenness <- paste(Bruno_top_20_betweenness_df$name, "\n", sprintf("%.0f", Bruno_top_20_betweenness_df$betweenness), sep = "")
# Calculate the layout for the graph
Bruno_layout_betweenness <- layout_nicely(Bruno_top_20_betweenness_subgraph)
# Plot the graph with combined node labels and betweenness centrality
plot(Bruno_top_20_betweenness_subgraph, layout = Bruno_layout_betweenness,
vertex.label = Bruno_vertex_labels_betweenness,
vertex.size = 5, edge.arrow.size = 0.5,
vertex.label.dist = 2)
install.packages("remotes")
library(remotes)
# install GitHub version of vosonSML 0.32.10
install_github("vosonlab/vosonSML")
# install GitHub version of rtweet 1.1.0.9001
install_github("ropensci/rtweet")
# Load packages required for this session into library
library(vosonSML)
library(magrittr)
library(igraph)
library(tidyr)
library(tidytext)
library(stopwords)
install.packages("remotes")
library(remotes)
# install GitHub version of vosonSML 0.32.10
install_github("vosonlab/vosonSML")
# install GitHub version of rtweet 1.1.0.9001
install_github("ropensci/rtweet")
# Load packages required for this session into library
library(vosonSML)
library(magrittr)
library(igraph)
library(tidyr)
library(tidytext)
library(stopwords)
library(vosonSML)
library(magrittr)
library(igraph)
library(tidyr)
library(tidytext)
library(stopwords)
library(vosonSML)
library(magrittr)
library(tidytext)
library(textclean)
library(qdapRegex)
library(tm)
library(topicmodels)
library(slam)
library(Rmpfr)
library(dplyr)
library(ggplot2)
library(reshape2)
Nicki_twitter_data <- Authenticate("twitter",
appName = my_app_name,
apiKey = my_api_key,
apiSecret = my_api_secret,
accessToken = my_access_token,
accessTokenSecret = my_access_token_secret) %>%
Collect(searchTerm = "Nicki Minaj",
searchType = "recent",
numTweets = 1000,
lang = "en",
includeRetweets = TRUE,
writeToFile = TRUE,
verbose = TRUE) # use 'verbose' to show download progress
brunomars_index <-which(V(bruno_twitter_actor_graph)$name == "brunomars")
# Get the degree, betweenness, and closeness
brunomars_degree <- degree(bruno_twomode_subgraph, mode = "total")[brunomars_index]
brunomars_betweenness <- betweenness(bruno_twomode_subgraph, directed = FALSE)[brunomars_index]
brunomars_closeness <- closeness(bruno_twomode_subgraph, mode = "total")[brunomars_index]
# Create a data frame with the centrality measures for "bruno Mars
brunomars_centrality_df <- data.frame(
Node = "@brunomars",
Degree = brunomars_degree,
Betweenness = brunomars_betweenness,
Closeness = brunomars_closeness
)
brunomars_index <-which(V(bruno_twitter_actor_graph)$name == "BrunoMars")
# Get the degree, betweenness, and closeness
brunomars_degree <- degree(bruno_twomode_subgraph, mode = "total")[brunomars_index]
brunomars_betweenness <- betweenness(bruno_twomode_subgraph, directed = FALSE)[brunomars_index]
brunomars_closeness <- closeness(bruno_twomode_subgraph, mode = "total")[brunomars_index]
# Create a data frame with the centrality measures for "bruno Mars
brunomars_centrality_df <- data.frame(
Node = "@brunomars",
Degree = brunomars_degree,
Betweenness = brunomars_betweenness,
Closeness = brunomars_closeness
)
brunomars_index <-which(V(bruno_twitter_actor_graph)$name == "BrunoMars")
brunomars_index
brunomars_index <-which(V(bruno_twitter_actor_graph)$name == "BrunoMars")
brunomars_index
# Get the degree, betweenness, and closeness
brunomars_degree <- degree(bruno_twitter_actor_graph, mode = "total")[brunomars_index]
brunomars_betweenness <- betweenness(bruno_twitter_actor_graph, directed = FALSE)[brunomars_index]
brunomars_closeness <- closeness(bruno_twitter_actor_graph, mode = "total")[brunomars_index]
# Create a data frame with the centrality measures for "bruno Mars
brunomars_centrality_df <- data.frame(
Node = "@brunomars",
Degree = brunomars_degree,
Betweenness = brunomars_betweenness,
Closeness = brunomars_closeness
)
# Print the data frame
print(brunomars_centrality_df)
library(tuber)
library(vosonSML)
library(magrittr)
library(igraph)
library(httpuv)
YTapi_key <- "AIzaSyATlclGOaBorzeCrKhO-NbuL7CYnafOULY"
YTclient_id <- "881581918236-p6lagdo0i8d655uso9k45sq31ke3g1tv.apps.googleusercontent.com"
YTclient_secret <- "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"
# Authenticate to YouTube using the tuber package
yt_oauth(app_id = YTclient_id, app_secret = YTclient_secret)
post_video_search <- yt_search("Post Malone")
setwd("/Users/frazerlinscott/Desktop/Social Media Milestone 2/27MayWD")
library(tuber)
library(vosonSML)
library(magrittr)
library(igraph)
library(httpuv)
YTapi_key <- "AIzaSyATlclGOaBorzeCrKhO-NbuL7CYnafOULY"
YTclient_id <- "881581918236-p6lagdo0i8d655uso9k45sq31ke3g1tv.apps.googleusercontent.com"
YTclient_secret <- "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"
# Authenticate to YouTube using the tuber package
yt_oauth(app_id = YTclient_id, app_secret = YTclient_secret)
nicki_video_search <- yt_search("Nicki Minaj")
View(nicki_video_search)
nicki_video_ids <- as.vector(nicki_video_search$video_id[1:3])
nicki_yt_data <- Authenticate("youtube", apiKey = YTapi_key) %>%
Collect(videoIDs = nicki_video_ids,
writeToFile = TRUE,
maxComments = 500,
verbose = TRUE)
View(nicki_yt_data)
nicki_undir_yt_actor_graph <- as.undirected(nicki_yt_actor_graph, mode = "collapse")
nicki_louvain_yt_actor <- cluster_louvain(nicki_undir_yt_actor_graph)
View(nicki_yt_data)
nicki_yt_actor_network <- nicki_yt_data %>% Create("actor")
nicki_yt_actor_graph <- Graph(nicki_yt_actor_network)
bruno_tw_actor_network <- Bruno_twitter_data %>% Create("actor")
bruno_tw_actor_graph <- Graph(bruno_tw_actor_network)
bruno_undir_tw_actor_graph <- as.undirected(bruno_tw_actor_graph, mode = "collapse")
bruno_louvain_tw_actor <- cluster_louvain(bruno_undir_tw_actor_graph)
sizes(bruno_louvain_tw_actor)
plot(bruno_louvain_tw_actor,
bruno_undir_tw_actor_graph,
vertex.label = V(bruno_undir_tw_actor_graph)$screen_name,
vertex.size = 4,
vertex.label.cex = 0.7)
save.image("~/Desktop/Social Media Milestone 2/27MayWD/Newest SNA.RData")
nicki_eb_yt_actor <- cluster_edge_betweenness(nicki_undir_yt_actor_graph)
nicki_yt_actor_network <- nicki_yt_data %>% Create("actor")
nicki_yt_actor_graph <- Graph(nicki_yt_actor_network)
nicki_undir_yt_actor_graph <- as.undirected(nicki_yt_actor_graph, mode = "collapse")
nicki_eb_yt_actor <- cluster_edge_betweenness(nicki_undir_yt_actor_graph)
sizes(nicki_eb_yt_actor)
plot(bruno_eb_yt_actor,
bruno_undir_yt_actor_graph,
vertex.label = V(bruno_undir_yt_actor_graph)$screen_name,
vertex.size = 4,
vertex.label.cex = 0.7)
plot(post_eb_yt_actor,
post_undir_yt_actor_graph,
vertex.label = V(post_undir_yt_actor_graph)$screen_name,
vertex.size = 4,
vertex.label.cex = 0.7)
View(sentiment_df)
ggplot(sentiment_df, aes(x = sentiment)) +
geom_bar(aes(fill = sentiment)) +
scale_fill_brewer(palette = "RdGy") +
labs(fill = "Sentiment") +
labs(x = "Sentiment Categories", y = "Number of Tweets") +
ggtitle("Sentiment Analysis of Tweets")
# Plot degree - Bruno
# Calculate the degree centrality
Bruno_degree_values <- degree(bruno_twitter_actor_graph, mode = "total")
# Sort the degree centrality values and extract the top 20 nodes
Bruno_top_20_degree <- sort(Bruno_degree_values, decreasing = TRUE)[1:20]
# Get the node names of the top 20 nodes
Bruno_top_20_degree_node_names <- names(Bruno_top_20_degree)
# Find the corresponding vertex ids in the graph
Bruno_top_20_degree_vertex_ids <- match(Bruno_top_20_degree_node_names, V(bruno_twitter_actor_graph)$name)
# Create the subgraph containing the top 20 nodes
Bruno_top_20_degree_subgraph <- induced_subgraph(bruno_twitter_actor_graph, vids = Bruno_top_20_degree_vertex_ids)
# Create a data frame with node names and degree values
Bruno_degree_df <- data.frame(name = names(Bruno_degree_values), degree = Bruno_degree_values)
# Filter the data frame to keep only the top 20 nodes
Bruno_top_20_degree_df <- Bruno_degree_df[Bruno_top_20_degree_vertex_ids, ]
# Create vertex labels by combining node names and their degree values
Bruno_vertex_labels <- paste(Bruno_top_20_degree_df$name, "\n", sprintf("%d", Bruno_top_20_degree_df$degree), sep = "")
# Calculate the layout for the graph
Bruno_layout_degree <- layout_with_kk(Bruno_top_20_degree_subgraph)
# Plot the graph with combined node labels and degree centrality
plot(Bruno_top_20_degree_subgraph, layout = Bruno_layout_degree,
vertex.label = Bruno_vertex_labels,
vertex.size = 6, edge.arrow.size = 0.1,
vertex.label.dist = 1.5)
# Calculate the degree centrality
Bruno_degree_values <- degree(bruno_twitter_actor_graph, mode = "total")
# Sort the degree centrality values and extract the top 20 nodes
Bruno_top_20_degree <- sort(Bruno_degree_values, decreasing = TRUE)[1:20]
# Get the node names of the top 20 nodes
Bruno_top_20_degree_node_names <- names(Bruno_top_20_degree)
# Find the corresponding vertex ids in the graph
Bruno_top_20_degree_vertex_ids <- match(Bruno_top_20_degree_node_names, V(bruno_twitter_actor_graph)$name)
# Create the subgraph containing the top 20 nodes
Bruno_top_20_degree_subgraph <- induced_subgraph(bruno_twitter_actor_graph, vids = Bruno_top_20_degree_vertex_ids)
# Create a data frame with node names and degree values
Bruno_degree_df <- data.frame(name = names(Bruno_degree_values), degree = Bruno_degree_values)
# Filter the data frame to keep only the top 20 nodes
Bruno_top_20_degree_df <- Bruno_degree_df[Bruno_top_20_degree_vertex_ids, ]
# Create vertex labels by combining node names and their degree values
Bruno_vertex_labels <- paste(Bruno_top_20_degree_df$name, "\n", sprintf("%d", Bruno_top_20_degree_df$degree), sep = "")
# Calculate the layout for the graph
Bruno_layout_degree <- layout_with_kk(Bruno_top_20_degree_subgraph)
# Plot the graph with combined node labels and degree centrality
plot(Bruno_top_20_degree_subgraph, layout = Bruno_layout_degree,
vertex.label = Bruno_vertex_labels,
vertex.size = 6, edge.arrow.size = 0.1,
vertex.label.dist = 1.5)
save.image("~/Desktop/Social Media Milestone 2/27MayWD/Newest SNA.RData")
